#pragma once

enum exploit_type_t
{
	dt = 0,
	hs
};

struct exploit_vars_t
{
	bool enabled = false;
	bool recharge = false;
	bool recharging = false;
	bool prepare = false;
	bool works = false;
	bool shot = false;
	bool toggle = false;

	int bullets = 0;

	void reset()
	{
		this->enabled = false;
		this->recharge = false;
		this->recharging = false;
		this->prepare = false;
		this->works = false;
		this->shot = false;
		this->toggle = false;

		this->bullets = 0;
	}
};

extern exploit_vars_t exploit[2];

class c_tick_base
{
private:
	struct tickbase_data_t
	{
		int tickbase;
		int command_number;
		int shift_amount;
		int cmd_diff;
		bool restore_tickbase;
	} data;
public:
	/// <summary>
	/// get data for tickbase restoring after exploit usage
	/// </summary>
	/// <param name="tickbase"> tickbase before shift </param>
	/// <param name="cmd"> last command number when shift began </param>
	/// <param name="shift"> how many commands were shifted </param>
	/// <param name="restore"> should we restore tickbase back? </param>
	/// <param name="cmd_diff"> how many commands created after disabling shift </param>
	void store(int tickbase, int cmd, int shift, bool restore, int cmd_diff = 1);
	void fix(int new_command_number, int& tickbase);
};

extern c_tick_base tick_base;

namespace exploits
{
	extern int shift_amount;
	extern int shift_timer;
	extern int charge_ticks;
	extern int simulation_ticks;

	extern bool need_to_recharge;
	extern bool recharge_completed;

	bool enabled();

	void prepare();
	void run();
}